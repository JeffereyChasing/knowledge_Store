const STATIC_CACHE_NAME="bagu-mock-static-v1.0.2",DATA_CACHE_NAME="questions-data-v1";async function handleDataCache(e){try{const n=await caches.open(DATA_CACHE_NAME),t=await n.match(e);return t?(console.log("📦 从数据缓存返回:",e.url),t):new Response(JSON.stringify({data:[],timestamp:Date.now(),version:"1.0"}),{status:200,headers:{"Content-Type":"application/json"}})}catch(e){return console.error("❌ 数据缓存处理失败:",e),new Response(JSON.stringify({error:"Cache error",data:[]}),{status:500,headers:{"Content-Type":"application/json"}})}}async function handleNavigation(e){try{console.log("🌐 尝试网络请求:",e.url);const n=await fetch(e);if(200===n.status)return console.log("✅ 网络请求成功"),n;throw new Error(`Server responded with ${n.status}`)}catch(e){return console.log("📶 网络不可用，显示离线页面"),createOfflinePage()}}async function handleStaticResource(e){const n=await caches.match(e);if(n)return console.log("💾 从缓存返回:",e.url),n;try{const n=await fetch(e);return 200===n.status&&(await caches.open(STATIC_CACHE_NAME)).put(e,n.clone()),n}catch(n){if(console.log("❌ 资源加载失败:",e.url),"image"===e.destination)return createImagePlaceholder();throw n}}function createOfflinePage(){return new Response('<!DOCTYPE html>\n    <html lang="zh-CN">\n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>离线模式 - 八股精Mock</title>\n        <style>\n            body {\n                font-family: -apple-system, BlinkMacSystemFont, sans-serif;\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                height: 100vh;\n                margin: 0;\n                background: linear-gradient(135deg, #667eea, #764ba2);\n                color: white;\n                text-align: center;\n            }\n            .container {\n                background: rgba(255,255,255,0.1);\n                padding: 2rem;\n                border-radius: 16px;\n                backdrop-filter: blur(10px);\n                max-width: 450px;\n                margin: 1rem;\n            }\n            .icon { font-size: 4rem; margin-bottom: 1rem; }\n            h1 { margin-bottom: 1rem; }\n            .features { text-align: left; margin: 1.5rem 0; }\n            .feature { margin: 0.5rem 0; }\n            button {\n                background: white;\n                color: #667eea;\n                border: none;\n                padding: 12px 24px;\n                border-radius: 25px;\n                cursor: pointer;\n                font-weight: 600;\n                margin: 0.5rem;\n            }\n        </style>\n    </head>\n    <body>\n        <div class="container">\n            <div class="icon">📶</div>\n            <h1>离线模式</h1>\n            <p>网络连接已断开</p>\n            \n            <div class="features">\n                <div class="feature">✓ 查看之前加载的题目</div>\n                <div class="feature">✓ 复习已缓存的内容</div>\n                <div class="feature">✓ 在本地记录学习进度</div>\n            </div>\n            \n            <button onclick="window.location.reload()">重新加载</button>\n        </div>\n        \n        <script>\n            window.addEventListener(\'online\', () => window.location.reload());\n        <\/script>\n    </body>\n    </html>',{status:200,headers:{"Content-Type":"text/html; charset=utf-8"}})}function createImagePlaceholder(){return new Response('<svg width="100" height="100" xmlns="http://www.w3.org/2000/svg">\n    <rect width="100" height="100" fill="#f5f5f5"/>\n    <text x="50" y="55" text-anchor="middle" fill="#999" font-size="12">图片</text>\n  </svg>',{headers:{"Content-Type":"image/svg+xml"}})}self.addEventListener("install",e=>{console.log("🔄 Service Worker 安装"),e.waitUntil(caches.open(STATIC_CACHE_NAME).then(e=>e.addAll(["/manifest.json","/favicon.ico"])).then(()=>{console.log("✅ 静态资源预缓存完成"),self.skipWaiting()}).catch(e=>{console.error("❌ 预缓存失败:",e),self.skipWaiting()}))}),self.addEventListener("activate",e=>{console.log("🚀 Service Worker 激活"),e.waitUntil(Promise.all([self.clients.claim(),caches.keys().then(e=>Promise.all(e.map(e=>{if(e!==STATIC_CACHE_NAME&&e!==DATA_CACHE_NAME)return console.log("🗑️ 删除旧缓存:",e),caches.delete(e)})))]))}),self.addEventListener("fetch",e=>{const{request:n}=e;n.url.startsWith(self.location.origin)&&(n.url.includes("/api/cached/")?e.respondWith(handleDataCache(n)):"navigate"!==n.mode?("script"===n.destination||"style"===n.destination||"image"===n.destination||n.url.includes("/static/"))&&e.respondWith(handleStaticResource(n)):e.respondWith(handleNavigation(n)))});