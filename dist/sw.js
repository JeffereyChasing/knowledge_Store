const STATIC_CACHE_NAME="bagu-mock-static-v2.0.0",DATA_CACHE_NAME="questions-data-v2",OFFLINE_PAGE="/offline.html",STATIC_ASSETS=["/","/manifest.json","/favicon.ico","/static/js/bundle.js","/static/css/main.css"];async function handleApiRequest(e){const n=await caches.open(DATA_CACHE_NAME);try{const t=await fetch(e);if(t.ok)return console.log("✅ API 请求成功，更新缓存:",e.url),n.put(e,t.clone()),(e.url.includes("/questions")||e.url.includes("/api/"))&&self.clients.matchAll().then(n=>{n.forEach(n=>{n.postMessage({type:"DATA_UPDATED",url:e.url,timestamp:Date.now()})})}),t;throw new Error(`HTTP ${t.status}`)}catch(t){console.log("📶 网络请求失败，尝试缓存:",e.url);const a=await n.match(e);return a?(console.log("✅ 从缓存返回 API 数据"),a):new Response(JSON.stringify({error:"网络不可用且无缓存数据",offline:!0,data:[]}),{status:200,headers:{"Content-Type":"application/json"}})}}async function handleOfflineDataRequest(e){const n=await caches.open(DATA_CACHE_NAME);try{const t=new URL(e.url).searchParams.get("key")||"default",a=await n.match(`/offline-data?key=${t}`);return a?(console.log("📦 返回离线缓存数据:",t),a):new Response(JSON.stringify({data:null,error:"No cached data available",timestamp:Date.now()}),{status:404,headers:{"Content-Type":"application/json"}})}catch(e){return console.error("❌ 离线数据请求失败:",e),new Response(JSON.stringify({error:"Cache error",data:null}),{status:500,headers:{"Content-Type":"application/json"}})}}async function handleStaticRequest(e){const n=await caches.match(e);if(n)return n;try{const n=await fetch(e);return n.ok&&(await caches.open(STATIC_CACHE_NAME)).put(e,n.clone()),n}catch(n){if("image"===e.destination)return createImagePlaceholder();throw n}}async function handleNavigationRequest(e){try{const n=await fetch(e);if(n.ok)return n;throw new Error(`HTTP ${n.status}`)}catch(e){console.log("📶 导航请求失败，显示离线页面");return await caches.match(OFFLINE_PAGE)||createOfflinePage()}}async function handleCacheQuestions(e){try{const n=await caches.open(DATA_CACHE_NAME),t={questions:e.slice(0,30),timestamp:Date.now(),version:"2.0.0",count:Math.min(e.length,30)},a=[n.put(new Request("/offline-data?key=questions"),new Response(JSON.stringify(t))),n.put(new Request("/api/cached/questions"),new Response(JSON.stringify(t)))];await Promise.all(a),console.log("✅ 题目数据缓存成功:",t.count,"道题目"),self.clients.matchAll().then(e=>{e.forEach(e=>{e.postMessage({type:"CACHE_UPDATED",count:t.count,timestamp:t.timestamp})})})}catch(e){console.error("❌ 题目数据缓存失败:",e)}}async function handleGetCacheStatus(e){try{const n=await caches.open(DATA_CACHE_NAME),t=await n.match("/offline-data?key=questions");if(t){const n=await t.json();e.ports[0].postMessage({status:"success",data:{hasCache:!0,count:n.count,timestamp:n.timestamp,version:n.version}})}else e.ports[0].postMessage({status:"success",data:{hasCache:!1,count:0,timestamp:null}})}catch(n){e.ports[0].postMessage({status:"error",error:n.message})}}async function handleClearCache(){try{const e=await caches.open(DATA_CACHE_NAME),n=await e.keys();await Promise.all(n.map(n=>e.delete(n))),console.log("✅ 缓存数据清理完成"),self.clients.matchAll().then(e=>{e.forEach(e=>{e.postMessage({type:"CACHE_CLEARED"})})})}catch(e){console.error("❌ 缓存清理失败:",e)}}function createOfflinePage(){return new Response('\n<!DOCTYPE html>\n<html lang="zh-CN">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>离线模式 - 八股精Mock</title>\n    <style>\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, sans-serif;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            background: linear-gradient(135deg, #667eea, #764ba2);\n            color: white;\n            text-align: center;\n        }\n        .container {\n            background: rgba(255,255,255,0.1);\n            padding: 2rem;\n            border-radius: 16px;\n            backdrop-filter: blur(10px);\n            max-width: 450px;\n            margin: 1rem;\n        }\n        .icon { font-size: 4rem; margin-bottom: 1rem; }\n        h1 { margin-bottom: 1rem; }\n        .features { text-align: left; margin: 1.5rem 0; }\n        .feature { margin: 0.5rem 0; }\n        button {\n            background: white;\n            color: #667eea;\n            border: none;\n            padding: 12px 24px;\n            border-radius: 25px;\n            cursor: pointer;\n            font-weight: 600;\n            margin: 0.5rem;\n        }\n        .cache-info {\n            background: rgba(255,255,255,0.2);\n            padding: 1rem;\n            border-radius: 8px;\n            margin: 1rem 0;\n        }\n    </style>\n</head>\n<body>\n    <div class="container">\n        <div class="icon">📶</div>\n        <h1>离线模式</h1>\n        <p>网络连接已断开，但您仍然可以：</p>\n        \n        <div class="features">\n            <div class="feature">✓ 查看缓存的题目</div>\n            <div class="feature">✓ 复习已学习的内容</div>\n            <div class="feature">✓ 在本地记录进度</div>\n        </div>\n        \n        <div class="cache-info" id="cacheInfo">\n            正在检查缓存数据...\n        </div>\n        \n        <button onclick="window.location.reload()">重新加载</button>\n        <button onclick="checkCache()">检查缓存</button>\n    </div>\n    \n    <script>\n        window.addEventListener(\'online\', () => window.location.reload());\n        \n        async function checkCache() {\n            try {\n                const response = await fetch(\'/offline-data?key=questions\');\n                const data = await response.json();\n                \n            } catch (error) {\n                document.getElementById(\'cacheInfo\').innerHTML = \n                    \'❌ 无法访问缓存数据\';\n            }\n        }\n        \n        // 页面加载时检查缓存\n        checkCache();\n    <\/script>\n</body>\n</html>',{headers:{"Content-Type":"text/html; charset=utf-8"}})}function createImagePlaceholder(){return new Response('<svg width="100" height="100" xmlns="http://www.w3.org/2000/svg">\n    <rect width="100" height="100" fill="#f5f5f5"/>\n    <text x="50" y="55" text-anchor="middle" fill="#999" font-size="12">图片加载中</text>\n  </svg>',{headers:{"Content-Type":"image/svg+xml"}})}self.addEventListener("install",e=>{console.log("🔄 Service Worker 安装中..."),e.waitUntil(Promise.all([caches.open(STATIC_CACHE_NAME).then(e=>(console.log("📦 缓存静态资源"),e.addAll(STATIC_ASSETS))),caches.open(DATA_CACHE_NAME).then(e=>e.add(OFFLINE_PAGE))]).then(()=>(console.log("✅ Service Worker 安装完成"),self.skipWaiting())).catch(e=>{console.error("❌ Service Worker 安装失败:",e)}))}),self.addEventListener("activate",e=>{console.log("🚀 Service Worker 激活"),e.waitUntil(Promise.all([self.clients.claim(),caches.keys().then(e=>Promise.all(e.map(e=>{if(![STATIC_CACHE_NAME,DATA_CACHE_NAME].includes(e))return console.log("🗑️ 删除旧缓存:",e),caches.delete(e)})))]).then(()=>(console.log("✅ Service Worker 激活完成"),self.clients.matchAll().then(e=>{e.forEach(e=>{e.postMessage({type:"SW_ACTIVATED",version:"2.0.0"})})}))))}),self.addEventListener("fetch",e=>{const{request:n}=e,t=new URL(n.url);t.origin.startsWith(self.location.origin)&&(t.pathname.startsWith("/api/")||t.pathname.includes("/questions")?e.respondWith(handleApiRequest(n)):t.pathname.includes("/offline-data")?e.respondWith(handleOfflineDataRequest(n)):"script"===n.destination||"style"===n.destination||"image"===n.destination||t.pathname.includes("/static/")?e.respondWith(handleStaticRequest(n)):"navigate"!==n.mode||e.respondWith(handleNavigationRequest(n)))}),self.addEventListener("message",e=>{const{data:n}=e;switch(n.type){case"CACHE_QUESTIONS":handleCacheQuestions(n.payload);break;case"GET_CACHE_STATUS":handleGetCacheStatus(e);break;case"CLEAR_CACHE":handleClearCache();break;case"SKIP_WAITING":self.skipWaiting()}});